# -*-makefile-*-
#
#
#----------------------------------------------
#
#  make website ........ make website
#  make html ........... make website and counts
#  make refresh-html ... remove old html and make new
#  make packages ....... make download packages
#
#
# NEW (ATTENTION - this is potentially very dangerous!)
#
#  make delete-empty-bitexts
#  make delete-empty-corpora
#
#----------------------------------------------

ifndef PARSED_LANGUAGES
  PARSED_LANGUAGES := $(sort $(notdir $(wildcard ${CORPUSPARSED}/??)) \
                            $(notdir $(wildcard ${CORPUSPARSED}/???)) \
                            $(notdir $(wildcard ${CORPUSPARSED}/??_??)))
endif

ifndef CES
  CES    := $(wildcard ${CORPUSXML}/*.xml.gz)
endif
ALG      := $(patsubst ${CORPUSXML}/%,${CORPUSRELEASE}/xml/%,$(CES))
TMX      := $(patsubst ${CORPUSXML}/%.xml.gz,${CORPUSRELEASE}/tmx/%.tmx.gz,$(CES))
MOSES    := $(patsubst ${CORPUSXML}/%.xml.gz,${CORPUSRELEASE}/moses/%.txt.zip,$(CES))
DIC      := $(patsubst ${CORPUSHOME}/%,${CORPUSRELEASE}/%,$(wildcard ${CORPUSDIC}/*.dic.gz))
# DIC      := $(patsubst ${CORPUSXML}/%.xml.gz,${CORPUSRELEASE}/dic/%.dic.gz,$(CES))

# ifndef SMT
# ifneq ($(wildcard ${CORPUSWORDALIGN}),)
#   SMT    := $(patsubst %,${CORPUSRELEASE}/smt/%.zip,\
# 		$(notdir $(sort $(shell find ${CORPUSWORDALIGN} -maxdepth 1 -mindepth 1 -type d -name '*-*'))))
# endif
# endif
ifndef SMT
ifneq ($(wildcard ${CORPUSWORDALIGN}),)
  SMT    := $(patsubst ${CORPUSWORDALIGN}/%/bitext.xml.gz,${CORPUSRELEASE}/smt/%.zip,\
		${wildcard ${CORPUSWORDALIGN}/*/bitext.xml.gz})
endif
endif

WORDALG  := $(patsubst %.zip,%.alg.zip,${SMT})

LANG_XML := $(patsubst %,${CORPUSRELEASE}/xml/%.zip,${LANGUAGES})
LANG_RAW := $(patsubst %,${CORPUSRELEASE}/raw/%.zip,${LANGUAGES})
LANG_UD  := $(patsubst %,${CORPUSRELEASE}/parsed/%.zip,${PARSED_LANGUAGES})


## strict = bitexts with "high-quality" alignments only
## (1:1, hunalign link score > 1)
TMX_STRICT    = $(patsubst ${CORPUSXML}/%.xml.gz,${CORPUSRELEASE}/tmx/%.strict.tmx.gz,$(CES))
MOSES_STRICT  = $(patsubst ${CORPUSXML}/%.xml.gz,${CORPUSRELEASE}/moses/%.strict.txt.zip,$(CES))

# monolingual data
MONO_TOK = $(patsubst %,${CORPUSRELEASE}/mono/%.tok.gz, ${LANGUAGES})
MONO_RAW = $(patsubst %,${CORPUSRELEASE}/mono/%.txt.gz, ${LANGUAGES})


# frequency counts
FREQ_COUNTS    = $(patsubst %,${CORPUSRELEASE}/freq/%.freq.gz, ${LANGUAGES})

# sample files in HTML
ALG_SAMPLES    = $(patsubst ${CORPUSXML}/%.xml.gz,${CORPUSPUB}/%_sample.html, ${CES})
CORPUS_SAMPLES = $(patsubst %,${CORPUSPUB}/%_sample.html, ${LANGUAGES})

# info files with statistics (NEW: store that in release dir!)
CES_INFO  = $(patsubst ${CORPUSXML}/%.xml.gz,${CORPUSRELEASE}/info/%.info,${CES})
TXT_INFO  = $(patsubst ${CORPUSRELEASE}/moses/%.txt.zip,${CORPUSRELEASE}/info/%.txt.info,${MOSES})
TMX_INFO  = $(patsubst ${CORPUSRELEASE}/tmx/%.tmx.gz,${CORPUSRELEASE}/info/%.tmx.info,${TMX})
LANG_INFO = $(patsubst %,${CORPUSRELEASE}/info/%.info,${LANGUAGES})

# CES_INFO  = $(patsubst %.xml.gz,%.info,${CES})
# TXT_INFO  = $(patsubst ${CORPUSRELEASE}/moses/%.txt.zip,${CORPUSXML}/%.txt.info,${MOSES})
# TMX_INFO  = $(patsubst ${CORPUSRELEASE}/tmx/%.tmx.gz,${CORPUSXML}/%.tmx.info,${TMX})
# LANG_INFO = $(patsubst %,${CORPUSXML}/%.info,${LANGUAGES})


## only CES files for the current source language
SRCCES = ${shell \
	for t in ${LANGUAGES}; do \
	  if [ -e ${CORPUSXML}/${SRC}-$$t.xml.gz ]; then \
	    echo "${CORPUSXML}/${SRC}-$$t.xml.gz"; \
	  fi \
	done  }


## NEW: reduce packages if we have > 10,000 bitexts in the corpus

REDUCED_PACKAGES   = ${ALG} ${LANG_XML} ${LANG_RAW} ${LANG_UD} ${MONO_TOK} ${MONO_RAW} ${FREQ_COUNTS}
REDUCED_INFOFILES  = ${LANG_INFO} ${CES_INFO}
STANDARD_PACKAGES  = ${REDUCED_PACKAGES} $(MOSES) $(TMX) ${SMT} ${WORDALG} ${DIC}
STANDARD_INFOFILES = ${REDUCED_INFOFILES} ${TXT_INFO} ${TMX_INFO}

ifeq ($(shell test $(words ${CES}) -gt 10000; echo $$?),0)
  SELECTED_PACKAGES = ${REDUCED_PACKAGES}
  INFOFILES         = ${REDUCED_INFOFILES}
else
  SELECTED_PACKAGES = ${STANDARD_PACKAGES}
  INFOFILES         = ${STANDARD_INFOFILES}
endif

show-nrof-packages:
	echo "nr of packages in release: $(words ${SELECTED_PACKAGES})"



# script for creating websites
# MAKEHTML   = opus-website
MAKEHTML   = ${HOME}/bin/opus-website

## some scripts for conversion
## TODO: should update to some better implementation
TAB2TMX    = ${OPUSTOOLS}/tab2tmx
OPUS2MOSES = ${HOME}/bin/opus2moses
# OPUS2MOSES = opus2moses

## OLD
# OPUS2MOSES = $(OPUSTOOLS)/xces2moses


# file with all packages that can be distributed
# PACKDIRS = subdir's that will be included in tar-ball
# NOTE: we don't create those packages anymore (too big in many cases)
PACKAGES   = ${CORPUSPUB}/.packages
PACKDIRS   = xml raw
# PACKDIRS   = xml raw parsed


## create directories with read permissions for everyone
MKDIR = mkdir -p -m 755


LOCALTMP  := ${shell mktemp -d}


.PHONY: html packages release refresh-html download-dirs webpage website
html: 	${OPUSPUB}/${CORPUS}.php ${FREQ_COUNTS}
	cat ${PACKAGES} | sort | uniq > ${PACKAGES}.uniq
	mv -f ${PACKAGES}.uniq ${PACKAGES}

## run html in a local tmp dir instead
## --> reduce I/O! but requires massive copying ...
html-local:
	mkdir -p ${TMPDIR}/OPUS/corpus/${CORPUS}
	-rsync ${OPUSCORPORA}/Makefile* ${TMPDIR}/OPUS/corpus/
	-ln -s ${OPUSTOOLS} ${TMPDIR}/OPUS/tools
	-rsync -a ${CORPUSHOME}/Makefile* ${TMPDIR}/OPUS/corpus/${CORPUS}/
	-rsync -a ${CORPUSHOME}/xml ${TMPDIR}/OPUS/corpus/${CORPUS}/
	-rsync -a ${CORPUSHOME}/raw ${TMPDIR}/OPUS/corpus/${CORPUS}/
	-rsync -a ${CORPUSHOME}/wordalign ${TMPDIR}/OPUS/corpus/${CORPUS}/
	-rsync -a ${CORPUSHOME}/parsed ${TMPDIR}/OPUS/corpus/${CORPUS}/
	-rsync -a ${CORPUSHOME}/ud ${TMPDIR}/OPUS/corpus/${CORPUS}/
	${MAKE} -C ${TMPDIR}/OPUS/corpus/${CORPUS} OPUSHOME=${TMPDIR}/OPUS html
	-rsync -za ${TMPDIR}/OPUS/public_html/${CORPUS} ${OPUSHOME}/public_html/
	-rsync -za ${TMPDIR}/OPUS/public_html/${CORPUS}*php ${OPUSHOME}/public_html/
	-rm -fr ${TMPDIR}/OPUS/corpus/${CORPUS}
	-rm -fr ${TMPDIR}/OPUS/public_html/${CORPUS}*

release packages: ${PACKAGES}

refresh-html:
	rm -f ${OPUSPUB}/${CORPUS}.php
	rm -f ${CORPUSPUB}/*sample.html
	touch $(CES)
	make html

download-dirs: ${CORPUSRELEASE}

webpage website: ${OPUSPUB}/${CORPUS}.php


## create the release dir and
${CORPUSRELEASE}:
	${MKDIR} $@
	${MKDIR} $@/xml $@/raw $@/mono 
	${MKDIR} $@/moses $@/tmx $@/smt 
	${MKDIR} $@/freq $@/dic
	${MAKE} PACKAGE="${CORPUS} in XML format" $@/xml/README
	${MAKE} PACKAGE="${CORPUS} in Moses format" $@/moses/README
	${MAKE} PACKAGE="${CORPUS} in TMX format" $@/tmx/README
	rm -f ${dir $@}/latest
	cd ${dir $@} && ln -s ${notdir $@} latest



## citation note to be added to website

#  CITENOTE=Please <a href="http://opus.lingfil.uu.se/RANLP_V.txt">cite the following article</a> if you use any part of the corpus in your own work:<br/> J\&ouml;rg Tiedemann, 2009, <a href="http://stp.lingfil.uu.se/~joerg/published/ranlp-V.pdf">News from OPUS - A Collection of Multilingual Parallel Corpora with Tools and Interfaces</a>. In N. Nicolov and K. Bontcheva and G. Angelova and R. Mitkov (eds.) Recent Advances in Natural Language Processing (vol V), pages 237-248, John Benjamins, Amsterdam/Philadelphia<br/>

ifndef CITENOTE
  CITENOTE=Please <a href="http://opus.lingfil.uu.se/LREC2012.txt">cite the following article</a> if you use any part of the corpus in your own work:<br/> J. Tiedemann, 2012, <a href="http://www.lrec-conf.org/proceedings/lrec2012/pdf/463_Paper.pdf"><i>Parallel Data, Tools and Interfaces in OPUS.</i></a> In Proceedings of the 8th International Conference on Language Resources and Evaluation (LREC 2012)<br/>
endif

## additional information about the downloads

ifndef DOWNLOADINFO
  DOWNLOADINFO=<p>Below you can download data files for all language pairs in different formats and with different kind of annotation (if available). You can click on the various links as explained below. In addition to the files shown on this webpage, OPUS also provides pre-compiled word alignments and phrase tables, bilingual dictionaries, frequency counts, and these files can be found through the <a href="/index.php">resources search form on the top-level website of OPUS</a>. 
endif

ifndef OTHERVERSIONS
  OTHERVERSIONS=<h3>Other releases:</h3><p><ul>${shell find ${OPUSPUB} -name '${CORPUS}-v*.php' -printf "%f\n" | sort | sed 's/${CORPUS}-\(v.*\).php/<li><a href=\"${CORPUS}-\1.php\">${CORPUS} \1<\/a><\/li>/'}</ul></p>
endif


${OPUSPUB}/${CORPUS}-${VERSION}.php: ${PACKAGES} ${CORPUS_SAMPLES} ${ALG_SAMPLES} ${INFOFILES}
	${MKDIR} $(dir $@)
	chmod 755 ${dir $@}
	chmod 755 ${OPUSPUB}/${CORPUS}
	${MAKEHTML} -h ${OPUSPUB} -o ${OPUSHOME} -d ${OPUSRELEASE} \
		${CORPUS} ${VERSION} |\
	sed -e 's#<h3>Download</h3>#<h3>Download</h3>${DOWNLOADINFO}${EXTRAHTML}${OTHERVERSIONS}#' \
	    -e 's#<h3>Download</h3>#${CITENOTE}<h3>Download</h3>#' \
	    -e 's#<h1>${CORPUS}${VERSION}</h1>#<h1>${CORPUS} ${VERSION}</h1>${SRCHTML}#' \
	    -e 's#<h1>${CORPUS}</h1>#<h1>${CORPUS} ${VERSION}</h1>${SRCHTML}#' > $@
	chmod 644 $@
#	chmod go+r $@


${OPUSPUB}/${CORPUS}.php: ${OPUSPUB}/${CORPUS}-${VERSION}.php
	rm -f $@
	( cd ${OPUSPUB}; ln -s $(notdir $<) $(notdir $@) )


${PACKAGES}:	${CORPUSRELEASE} \
		${CORPUSRELEASE}/LICENSE \
		${CORPUSRELEASE}/README \
		${SELECTED_PACKAGES}
	${MKDIR} ${dir $@}
	for s in ${LANGUAGES}; do \
	  for t in ${LANGUAGES}; do \
	    if [ -e ${CORPUSRELEASE}/xml/$$s-$$t.xml.gz ]; then \
	      echo "xml/$$s-$$t.xml.gz" >> $@; \
	    fi; \
	    if [ -e ${CORPUSRELEASE}/tmx/$$s-$$t.tmx.gz ]; then \
	      echo "tmx/$$s-$$t.tmx.gz" >> $@; \
	    fi; \
	    if [ -e ${CORPUSRELEASE}/moses/$$s-$$t.txt.zip ]; then \
	      echo "tmx/$$s-$$t.txt.zip" >> $@; \
	    fi; \
	  done \
	done
	for f in ${LANG_XML} ${LANG_RAW} ${LANG_UD}; do \
	  echo $$f | tr ' ' "\n" | sed "s#${OPUSRELEASE}/##" >> $@; \
	done
	for f in ${MONO_TOK} ${MONO_RAW} ${FREQ_COUNTS}; do \
	  echo $$f | tr ' ' "\n" | sed "s#${OPUSRELEASE}/##" >> $@; \
	done
	cat ${PACKAGES} | sort | uniq > ${PACKAGES}.uniq
	mv -f ${PACKAGES}.uniq ${PACKAGES}
	echo "-----------------------------"      >> ${CORPUSRELEASE}/README
	echo "xml ....... tokenized corpus and sentence alignments" >> ${CORPUSRELEASE}/README
	echo "raw ....... untokenized corpus in XML" >> ${CORPUSRELEASE}/README
	echo "parsed .... parsed corpus in XML"   >> ${CORPUSRELEASE}/README
	echo "mono ...... monolingual text files" >> ${CORPUSRELEASE}/README
	echo "moses ..... aligned plain text files" >> ${CORPUSRELEASE}/README
	echo "tmx ....... bitexts in TMX format" >> ${CORPUSRELEASE}/README
	echo "freq ...... token frequencies"      >> ${CORPUSRELEASE}/README
	echo "smt ....... word alignments and phrase translation tables" >> ${CORPUSRELEASE}/README
	echo "dic ....... bilingual dictionaries extracted from word alignments" >> ${CORPUSRELEASE}/README
	echo "-----------------------------"  >> ${CORPUSRELEASE}/README
	echo "Files in this release"          >> ${CORPUSRELEASE}/README
	echo "-----------------------------"  >> ${CORPUSRELEASE}/README
	cat ${PACKAGES} | grep '/${VERSION}/' >> ${CORPUSRELEASE}/README


#	# echo "${ALG}" | tr ' ' "\n" | sed "s#${OPUSRELEASE}/##" >> $@
#	# echo "${LANG_XML} ${LANG_RAW} ${LANG_UD}" | tr ' ' "\n" | sed "s#${OPUSRELEASE}/##" >> $@
#	# echo "${MONO_TOK} ${MONO_RAW} ${FREQ_COUNTS}" | tr ' ' "\n" | sed "s#${OPUSRELEASE}/##" >> $@
#	# echo "${TMX}" | tr ' ' "\n" | sed "s#${OPUSRELEASE}/##" >> $@
#	# echo "${MOSES}" | tr ' ' "\n" | sed "s#${OPUSRELEASE}/##" >> $@



## generic target to create a README file

%/README:
	echo " Corpus Name: ${CORPUS}" >$@
ifneq (${PACKAGE},)
	echo "     Package: ${PACKAGE}" >>$@
endif
	echo "     Website: http://opus.nlpl.eu/${CORPUS}-${VERSION}.php" >> $@
	echo "     Release: ${VERSION}" >>$@
	echo "Release date: ${shell date}" >> $@
ifneq (${LICENSE},)
	echo "     License: ${LICENSE}" >>$@
endif
ifneq (${COPYRIGHT},)
	echo "   Copyright: ${LICENSE}" >>$@
endif
	echo "" >>$@
	echo "This corpus is part of OPUS - the open collection of parallel corpora" >> $@
	echo "OPUS Website: http://opus.nlpl.eu" >> $@
	echo "" >>$@
	echo "${CITENOTE}" | sed 's/<[^>]*>//g' >> $@
	echo "" >>$@
	echo "${SRCHTML}" | sed 's/<[^>]*>//g' >> $@
	echo "${EXTRAHTML}" | sed 's/<[^>]*>//g' >> $@
	chmod 644 $@
#	chmod go+r $@

%/LICENSE:
	if [ -e ${CORPUSHOME}/LICENSE ]; then \
	  cp ${CORPUSHOME}/LICENSE $@; \
	else \
	  echo "The data set comes with the same license" > $@; \
	  echo "as the original sources." >> $@; \
	  echo "Please, check the information about the source" >> $@; \
	  echo "that is given on" >> $@; \
	  echo "http://opus.nlpl.eu/${CORPUS}-${VERSION}.php" >> $@; \
	fi
	chmod 644 $@
#	chmod go+r $@


## make an archive with all xml-files!

.PHONY: pack
pack: ${OPUSRELEASE}/${CORPUS}.tar.gz

### just pack everything in xml and raw!

${OPUSRELEASE}/${CORPUS}.tar.gz: $(CES)
	${MKDIR} $(shell dirname $@)
	-tar 	--ignore-failed-read  \
		--exclude='*Makefile*' \
		--exclude='*~' \
		--exclude='*.info' \
		--exclude-vcs \
		--transform 's#^#${CORPUS}/#' \
		-chzf $(notdir $@) ${PACKDIRS}
	mv -f $(notdir $@) $@
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@
#	chmod go+r $@

## copy sentence alignment files

.PHONY: alg_files
alg_files: ${ALG}

${ALG}: ${CORPUSRELEASE}/%: ${CORPUSHOME}/%
	@${MKDIR} ${dir $@}
	rsync $< $@
	chmod 644 $@
#	chmod go+r $@

#----------------------------------------------------------------------------
# pack all language files in tar-archives
#----------------------------------------------------------------------------

$(patsubst %,${CORPUSXML}/%,${LANGUAGES}):
	@echo "XML files do not exist. Try to unpack from tar-ball"

$(patsubst %,${CORPUSRAW}/%,${LANGUAGES}):
	@echo "XML files do not exist. Try to unpack from tar-ball"



# for historical reasons: leave tar targets
.PHONY: lang_xml lang_tar lang_tok_tar
lang_xml lang_tar lang_tok_tar: ${LANG_XML}

${LANG_XML}: ${CORPUSRELEASE}/xml/%.zip: # ${CORPUSXML}/%
	@${MKDIR} ${dir $@}
	${MKDIR} ${TMPDIR}/$@/${CORPUS}/xml
	if [ -d ${patsubst ${CORPUSRELEASE}/xml/%.zip,${CORPUSXML}/%,$@} ]; then \
	  rsync -a ${patsubst ${CORPUSRELEASE}/xml/%.zip,${CORPUSXML}/%,$@} \
			${TMPDIR}/$@/${CORPUS}/xml/; \
	else \
	  tar -C ${TMPDIR}/$@/${CORPUS} --strip-components=1 \
		-xzf $(patsubst ${CORPUSRELEASE}/xml/%.zip,${CORPUSHTML}/%.tar.gz,$@); \
	fi
	find ${TMPDIR}/$@/${CORPUS}/xml -type l | xargs rm -f
	find ${TMPDIR}/$@/${CORPUS}/xml -name '*.${XMLEXT}' |\
	xargs -P 8 gunzip -f
	${MAKE} PACKAGE=${patsubst ${OPUSRELEASE}/%.zip,%,$@} ${TMPDIR}/$@/README
	${MAKE} ${TMPDIR}/$@/LICENSE
	echo "${CORPUS}/xml/${patsubst %.zip,%,${notdir $@}}" > ${TMPDIR}/$@/INFO
	echo "${CORPUS}" >> ${TMPDIR}/$@/INFO
	echo "${VERSION}" >> ${TMPDIR}/$@/INFO
	( cd ${TMPDIR}/$@; zip -r $@ INFO README LICENSE ${CORPUS}; cd ${PWD} )
	rm -fr ${TMPDIR}/$@
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@

# raw corpus files

.PHONY: lang_raw lang_raw_tar
lang_raw lang_raw_tar: ${LANG_RAW}

${LANG_RAW}: ${CORPUSRELEASE}/raw/%.zip: # ${CORPUSRAW}/%
	@${MKDIR} ${dir $@}
	${MKDIR} ${TMPDIR}/$@/${CORPUS}/raw
	if [ -d ${patsubst ${CORPUSRELEASE}/raw/%.zip,${CORPUSRAW}/%,$@} ]; then \
	  rsync -a ${patsubst ${CORPUSRELEASE}/raw/%.zip,${CORPUSRAW}/%,$@} ${TMPDIR}/$@/${CORPUS}/raw/; \
	else \
	  tar -C ${TMPDIR}/$@/${CORPUS} --strip-components=1 \
		-xzf $(patsubst ${CORPUSRELEASE}/raw/%.zip,${CORPUSHTML}/%.raw.tar.gz,$@); \
	fi
	find ${TMPDIR}/$@/${CORPUS}/raw -type l | xargs rm -f
	find ${TMPDIR}/$@/${CORPUS}/raw -name '*.${XMLEXT}' |\
	xargs -P 8 gunzip -f
	${MAKE} PACKAGE=${patsubst ${OPUSRELEASE}/%.zip,%,$@} ${TMPDIR}/$@/README
	${MAKE} ${TMPDIR}/$@/LICENSE
	echo "${CORPUS}/raw/${patsubst %.zip,%,${notdir $@}}" > ${TMPDIR}/$@/INFO
	echo "${CORPUS}" >> ${TMPDIR}/$@/INFO
	echo "${VERSION}" >> ${TMPDIR}/$@/INFO
	( cd ${TMPDIR}/$@; zip -r $@ INFO README LICENSE ${CORPUS}; cd ${PWD} )
	rm -fr ${TMPDIR}/$@
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@


# parsed corpus files (not all languages need to be parsed)

.PHONY: lang_parsed lang_parsed_tar
lang_parsed lang_parsed_tar:
	for l in ${LANGUAGES}; do \
	  if [ -d ${CORPUSPARSED}/$$l ]; then \
	    ${MAKE} ${CORPUSRELEASE}/$$l.parsed.zip; \
	  fi; \
	done

${LANG_UD}: ${CORPUSRELEASE}/parsed/%.zip: ${CORPUSPARSED}/%
	@${MKDIR} ${dir $@}
	${MKDIR} ${TMPDIR}/$</${CORPUS}/parsed
	rsync -a $< ${TMPDIR}/$</${CORPUS}/parsed/
	find ${TMPDIR}/$</${CORPUS}/parsed -name '*.${XMLEXT}' |\
	xargs -P 8 gunzip -f
	${MAKE} PACKAGE=${patsubst ${OPUSCORPORA}/%,%,$<} ${TMPDIR}/$</README
	${MAKE} ${TMPDIR}/$</LICENSE
	echo "${patsubst ${OPUSCORPORA}/%,%,$<}" > ${TMPDIR}/$</INFO
	echo "${CORPUS}" >> ${TMPDIR}/$</INFO
	echo "${VERSION}" >> ${TMPDIR}/$</INFO
	( cd ${TMPDIR}/$<; zip -r $@ INFO README LICENSE ${CORPUS}; cd ${PWD} )
	rm -fr ${TMPDIR}/$<
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@

#----------------------------------------------------------------------------
# make monolingual plain text files
#----------------------------------------------------------------------------

.PHONY: mono_tok mono_raw
mono_tok: ${MONO_TOK}
mono_raw: ${MONO_RAW}

CORPUS_EXT = xml

# monolingual data for language modeling
${CORPUSRELEASE}/mono/%.tok.gz: ${CORPUSXML}/%
	@${MKDIR} ${dir $@}
	if [ -d $< ]; then \
	  find $</ -name '*.${CORPUS_EXT}.gz' -type f | \
	  xargs zcat | \
	  perl -p -e 's/[\x00-\x08\x0B\x0C\x0E-\x1F]//g;s/&(?!(#\d+|\w+);)/&amp;/g' |\
	  opus2text | gzip -c > $@; \
	fi
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@


${CORPUSRELEASE}/mono/%.txt.gz: ${CORPUSRAW}/%
	@${MKDIR} ${dir $@}
	if [ -d $< ]; then \
	  find $</ -name '*.${CORPUS_EXT}.gz' -type f | \
	  xargs zcat | \
	  perl -p -e 's/[\x00-\x08\x0B\x0C\x0E-\x1F]//g;s/&(?!(#\d+|\w+);)/&amp;/g' |\
	  opus2text | gzip -c > $@; \
	fi
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@


#----------------------------------------------------------------------------
# frequency counts for lowercased tokens
#----------------------------------------------------------------------------

.PHONY: freq_counts
freq_counts: ${FREQ_COUNTS}

${CORPUSRELEASE}/freq/%.freq.gz: ${CORPUSRELEASE}/mono/%.tok.gz
	@${MKDIR} ${dir $@}
	zcat $< | \
	perl -e 'binmode(STDIN,":utf8");binmode(STDOUT,":utf8");while(<>){$$_=lc($$_);print;}' |\
	tr ' ' "\n" | \
	sort | uniq -c | sort -nr | \
	gzip -c > $@
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@


## not good enough for unicode:
##	tr '[:upper:]' '[:lower:]'

#----------------------------------------------------------------------------
# alignment sample files
#----------------------------------------------------------------------------

.PHONY: alg_samples
alg_samples: ${ALG_SAMPLES}

# -N '\/0\/' is used to filter out some strange files in OpenSubtitles2012
# which would be used for many sample files (year = 0)
# (they look messy and should actually be removed from the corpus)

${ALG_SAMPLES}: ${CORPUSPUB}/%_sample.html: ${CORPUSXML}/%.xml.gz
	@${MKDIR} ${dir $@}
	opus-read \
		-d ${CORPUSXML} \
		-h -m 100 \
		-N '\/0\/' \
	$< > $@
	chmod 644 $@

## NEW: could use zip archives
## disadvantage: it is slow!
#		-d ${CORPUS} \
#		-r ${VERSION} \

## OLD: (this does not work if the XML-files are deleted)
## --> use the released zip file
#		-d ${CORPUSXML} \


.PHONY: corpus_samples
corpus_samples: ${CORPUS_SAMPLES}

${CORPUS_SAMPLES}:
	@${MKDIR} ${dir $@}
	echo '<html><head></head><body><pre>' >$@
	-find ${patsubst ${CORPUSPUB}/%_sample.html,${CORPUSXML}/%,$@}/ -name '*.${ALGEXT}' | \
	xargs zcat | head -100 | recode utf8..utf16 | recode utf16..html >> $@
	echo '</pre></body></html>' >> $@
	chmod 644 $@

# ${CORPUS_SAMPLES}: ${CORPUSPUB}/%_sample.html: ${CORPUSXML}/%
# 	@${MKDIR} ${dir $@}
# 	echo '<html><head></head><body><pre>' >$@
# 	find $</ -name '*.xml.gz' | \
# 	xargs zcat | head -100 | recode utf8..utf16 | recode utf16..html >> $@
# 	echo '</pre></body></html>' >> $@




#----------------------------------------------------------------------------
# convert all bitexts to TMX
#----------------------------------------------------------------------------

# create TMX files from plain text files (Moses format)
# TMX files contain only unique translation units!
# --> use sort/uniq
# --> number alignments first to keep textual order!

tmx: ${CORPUSRELEASE} $(TMX)
	${MAKE} PACKAGE="${CORPUS} in TMX format" ${CORPUSRELEASE}/tmx/README

tmx-strict: ${CORPUSRELEASE} $(TMX_STRICT)

## only process bitexts with the current source language
srctmx:
	${MAKE} CES="${SRCCES}" tmx

## submit jobs for each 
srctmx-jobs:
	for l in ${LANGUAGES}; do \
	  rm -f srctmx.submit; \
	  ${MAKE} SRC=$$l srctmx.submit; \
	done


$(TMX) $(TMX_STRICT): ${CORPUSRELEASE}/tmx/%.tmx.gz: ${CORPUSRELEASE}/moses/%.txt.zip
	@${MKDIR} ${dir $@}
	-( mkdir -p ${LOCALTMP}; \
	   cd ${LOCALTMP}; \
	   unzip $< -x README INFO LICENSE; \
	   S=$(firstword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	   T=$(lastword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	   BASE=${CORPUS}.$(patsubst %.txt.zip,%,$(notdir $<));\
	   SEXT=$$S; TEXT=$$T; \
	   if [ "$$SEXT" == "$$TEXT" ]; then SEXT=$${SEXT}1;TEXT=$${TEXT}2; fi; \
	   paste $$BASE.$$SEXT $$BASE.$$TEXT |\
	   nl | sort -k 2 | uniq -f 1 | sort -n |\
	   cut -f2,3 |\
	   $(TAB2TMX) -s $$S -t $$T |\
	   gzip -c > $@; \
	   rm -f $$BASE.$$SEXT $$BASE.$$TEXT $$BASE.ids $$BASE.xml; )
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@

## old:
#	  sed = - | sed 'N;s/\n/\t/' | sort -k 2 | uniq -f 1 | sort -n |\

#----------------------------------------------------------------------------
# convert all bitexts to Moses format
#----------------------------------------------------------------------------

.PHONY: moses
moses: ${CORPUSRELEASE} $(MOSES)

$(MOSES): ${CORPUSRELEASE}/moses/%.txt.zip: ${CORPUSXML}/%.xml.gz
	@${MKDIR} ${dir $@}
	( S=$(firstword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	  T=$(lastword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	  BASE=${CORPUS}.$(patsubst %.xml.gz,%,$(notdir $<));\
	  if [ "$$S" == "$$T" ]; then S=$${S}1;T=$${T}2; fi; \
	  zcat $< |\
	  $(OPUS2MOSES) -r -d ${CORPUSRAW} \
		-e $$BASE.$$S \
		-f $$BASE.$$T \
		-b $$BASE.xml; \
	  rm -f $@; \
	  ${MKDIR} ${TMPDIR}/$$BASE; \
	  ${MAKE} PACKAGE="${CORPUS}.$$S-$$T in Moses format" ${TMPDIR}/$$BASE/README; \
	  rm -f $$BASE.ids; \
	  ${MAKE} ${TMPDIR}/$$BASE/LICENSE; \
	  zip -j $@ ${TMPDIR}/$$BASE/README ${TMPDIR}/$$BASE/LICENSE \
			$$BASE.$$S $$BASE.$$T $$BASE.xml; \
	  rm -f $$BASE.$$S $$BASE.$$T $$BASE.xml;\
	  rm -f ${TMPDIR}/$$BASE/README ${TMPDIR}/$$BASE/LICENSE;\
	  rmdir ${TMPDIR}/$$BASE; )
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@


# ## OLD:
# 	  $(OPUS2MOSES) -d ${CORPUSRAW} -s $$S -t $$T \
# 		-P $$BASE.ids \
# 		$< $$BASE; \
# 	  rm -f $@; \
# 	  sed 's/  */ /g' < $$BASE.$$S > $$BASE.$$S.tmp; \
# 	  sed 's/  */ /g' < $$BASE.$$T > $$BASE.$$T.tmp; \
# 	  mv $$BASE.$$S.tmp $$BASE.$$S; \
# 	  mv $$BASE.$$T.tmp $$BASE.$$T; \
# 	  if [ -e "$$BASE.ids" ]; then \
# 	    cat $$BASE.ids | ${OPUSTOOLS}/wordalign/ids2links.pl > $$BASE.xml;\
# 	  else \
# 	    gzip -cd $< > $$BASE.xml; \
# 	  fi; \


## plain text bitexts with 1:1 sentence alignments
.PHONY: moses-strict
moses-strict: ${CORPUSRELEASE} $(MOSES_STRICT)

$(MOSES_STRICT): ${CORPUSRELEASE}/moses/%.strict.txt.zip: ${CORPUSXML}/%.xml.gz
	@${MKDIR} ${dir $@}
	opus-read -c 1 -S 1 -T 1 -l $< > $(<:gz=11)
	( S=$(firstword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	  T=$(lastword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	  BASE=${CORPUS}.$(patsubst %.xml.gz,%,$(notdir $<));\
	  if [ "$$S" == "$$T" ]; then S=$${S}1;T=$${T}2; fi; \
	  cat $(<:gz=11) |\
	  $(OPUS2MOSES) -r -d ${CORPUSRAW} \
		-e $$BASE.$$S \
		-f $$BASE.$$T \
		-b $$BASE.xml; \
	  rm -f $@; \
	  ${MKDIR} ${TMPDIR}/$$BASE; \
	  ${MAKE} PACKAGE="${CORPUS}.$$S-$$T in Moses format" ${TMPDIR}/$$BASE/README; \
	  ${MAKE} ${TMPDIR}/$$BASE/LICENSE; \
	  zip -j $@ ${TMPDIR}/$$BASE/README ${TMPDIR}/$$BASE/LICENSE \
			$$BASE.$$S $$BASE.$$T $$BASE.xml; \
	  rm -f $$BASE.$$S $$BASE.$$T $$BASE.ids ${TMPDIR}/$$BASE/README;\
	  rmdir ${TMPDIR}/$$BASE; )
	rm -f $(<:gz=11)
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@

## OLD:
#	  $(OPUS2MOSES) -d ${CORPUSRAW} -s $$S -t $$T \
#		-P $$BASE.ids \
#		$(<:gz=11) $$BASE; \

## only process bitexts with the current source language
srcmoses:
	${MAKE} CES="${SRCCES}" moses

## submit jobs for each 
srcmoses-jobs:
	for l in ${LANGUAGES}; do \
	  rm -f srcmoses.submit; \
	  ${MAKE} SRC=$$l srcmoses.submit; \
	done



.PHONY: smt
smt: ${WORDALG} ${SMT}

smt-test:
	echo ${WORDALG}
	echo ${SMT}

.PHONY: wordalg
wordalg: ${WORDALG}

## a zip file of word alignments (including corpus files)
${WORDALG}: ${CORPUSRELEASE}/smt/%.alg.zip: ${CORPUSWORDALIGN}/% # ${CORPUSWORDALIGN}/%/bitext.xml.gz
	${MKDIR} ${dir $@}
	${MKDIR} ${TMPDIR}/$@/${CORPUS}/smt/${notdir $<}
	rsync -a \
		--exclude '*\.wordalign*' \
		--exclude '*/lex.*' \
		--exclude '*/phrase*' \
		--exclude 'c.*' \
		--exclude '*/c.*' \
		$</ ${TMPDIR}/$@/${CORPUS}/smt/${notdir $<}
	find ${TMPDIR}/$@/${CORPUS}/smt -type f -name '*.gz' |\
	xargs -P 8 gunzip -f
	${MAKE} PACKAGE=${patsubst ${OPUSRELEASE}/%.zip,%,$@} ${TMPDIR}/$@/README
	rm -f $@
	( cd ${TMPDIR}/$@; zip -r $@ README ${CORPUS}; cd ${PWD} )
	rm -fr ${TMPDIR}/$@
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@


.PHONY: pt
pt: ${SMT}

## a zip file of SMT phrase translation tables
${SMT}: ${CORPUSRELEASE}/smt/%.zip: ${CORPUSWORDALIGN}/%
	${MKDIR} ${dir $@}
	${MKDIR} ${TMPDIR}/$@/${CORPUS}/smt/${notdir $<}
	rsync -a \
		--include '*/lex.*' \
		--include '*/phrase*' \
		--include="*/" \
		--exclude="*" \
		$</ ${TMPDIR}/$@/${CORPUS}/smt/${notdir $<}
	find ${TMPDIR}/$@/${CORPUS}/smt -type f -name '*.gz' |\
	xargs -P 8 gunzip -f
	${MAKE} PACKAGE=${patsubst ${OPUSRELEASE}/%.zip,%,$@} ${TMPDIR}/$@/README
	rm -f $@
	( cd ${TMPDIR}/$@; zip -r $@ README ${CORPUS}; cd ${PWD} )
	rm -fr ${TMPDIR}/$@
	${MKDIR} ${dir ${PACKAGES}}
	echo "$@" | sed "s#${OPUSRELEASE}/##" >> ${PACKAGES}
	chmod 644 $@


.PHONY: dic-release
dic-release: ${DIC}
${DIC}: ${CORPUSRELEASE}/%: ${CORPUSHOME}/%
	@${MKDIR} ${dir $@}
	rsync $< $@
	chmod 644 $@


## delete some packages that have no phrase table
SMTFIX = ${patsubst %.zip,%.fix,${SMT}}
smtfix: ${SMTFIX}

${SMTFIX}: ${CORPUSRELEASE}/smt/%.fix: ${CORPUSWORDALIGN}/%
	@if [ ! -e $</model/phrase-table-filtered.gz ]; then \
	  if [ -e ${patsubst %.fix,%.zip,$@} ]; then \
	    rm -f ${patsubst %.fix,%.zip,$@}; \
	  fi \
	fi



# ## fix broken links
# ${CORPUSWORDALIGN}/%:
# 	if [ -L $@ ] && [ ! -e $@ ]; then \
# 	  if [ -d ${CORPUSRELEASE}/wordalign/${notdir $@} ]; then \
# 	    rm -f $@; \
# 	    mv ${CORPUSRELEASE}/wordalign/${notdir $@} $@; \
# 	  fi \
# 	fi


# create bitext info files (some basic statistics)

.PHONY: info lang_info ces_info txt_info tmx_info
info: lang_info ces_info txt_info tmx_info

lang_info: ${LANG_INFO}

${LANG_INFO}:
	${MKDIR} ${dir $@}
	find ${patsubst ${CORPUSRELEASE}/info/%.info,${CORPUSXML}/%,$@}/ -name '*.${XMLEXT}' -type f | \
	wc -l > $@
	find ${patsubst ${CORPUSRELEASE}/info/%.info,${CORPUSXML}/%,$@}/ -name '*.${XMLEXT}' -type f | \
	xargs zcat | grep '</s>' | wc -l >> $@
	find ${patsubst ${CORPUSRELEASE}/info/%.info,${CORPUSXML}/%,$@}/ -name '*.${XMLEXT}' -type f | \
	xargs zcat | grep '</w>' | wc -l >> $@
	chmod 644 $@

# ${LANG_INFO}: ${CORPUSXML}/%.info: ${CORPUSXML}/%
# 	find $</ -name '*.xml.gz' -type f | wc -l > $@
# 	find $</ -name '*.xml.gz' -type f | \
# 	xargs zcat | grep '</s>' | wc -l >> $@
# 	find $</ -name '*.xml.gz' -type f | \
# 	xargs zcat | grep '</w>' | wc -l >> $@


ces_info: ${CES_INFO}

${CES_INFO}: ${CORPUSRELEASE}/info/%.info: ${CORPUSXML}/%.xml.gz
	${MKDIR} ${dir $@}
	zgrep 'fromDoc' $< | wc -l > $@
	zgrep 'xtargets' $< | wc -l >> $@
	( cd ${CORPUSXML}; \
	  zgrep 'fromDoc' $< | \
	  tr ' ' "\n" | grep 'fromDoc' | cut -f2 -d '"' |\
	  xargs zcat | \
	  grep '</w>' | wc -l >> $@ )
	( cd ${CORPUSXML}; \
	  zgrep 'toDoc' $< | \
	  tr ' ' "\n" | grep 'toDoc' | cut -f2 -d '"' |\
	  xargs zcat | \
	  grep '</w>' | wc -l >> $@ )
	chmod 644 $@


txt_info: ${TXT_INFO}

${TXT_INFO}: ${CORPUSRELEASE}/info/%.txt.info: ${CORPUSRELEASE}/moses/%.txt.zip
	${MKDIR} ${dir $@}
	-( mkdir -p ${LOCALTMP}; \
	   cd ${LOCALTMP}; \
	   unzip -d . $< -x README INFO LICENSE; \
	   S=$(firstword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	   T=$(lastword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	   P=$$S-$$T; \
	   if [ "$$S" == "$$T" ]; then S=$${S}1;T=$${T}2; fi; \
	   if [ ! -e ${CORPUS}.$$P.$$S ]; then \
		find home -name "*$$P.$$S" -exec mv {} ${CORPUS}.$$P.$$S \; ; \
		find home -name "*$$P.$$T" -exec mv {} ${CORPUS}.$$P.$$T \; ; \
		rm -f $< ;\
		zip $< ${CORPUS}.$$P.$$S ${CORPUS}.$$P.$$T; \
	   fi; \
	   wc -l < ${CORPUS}.$$P.$$S > $(CORPUSRELEASE)/info/$$P.txt.info; \
	   wc -w < ${CORPUS}.$$P.$$S >> $(CORPUSRELEASE)/info/$$P.txt.info; \
	   wc -w < ${CORPUS}.$$P.$$T >> $(CORPUSRELEASE)/info/$$P.txt.info; \
	   rm -f *$$P.$$S *$$P.$$T *$$P.ids *$$P.xml; )
	chmod 644 $@


tmx_info: ${TMX_INFO}

${TMX_INFO}: ${CORPUSRELEASE}/info/%.tmx.info: ${CORPUSRELEASE}/tmx/%.tmx.gz
	${MKDIR} ${dir $@}
	( S=$(firstword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	  T=$(lastword $(subst -, ,$(firstword $(subst ., ,$(notdir $<)))));\
	 zgrep '</tu>' $< | wc -l > $@; \
	 zgrep "xml:lang=\"$$S\"" $< | \
	  	sed 's|^.*<seg>||;s|</seg>.*$$||;' | \
	  	wc -w >> $@; \
	 zgrep "xml:lang=\"$$T\"" $< | \
	  	sed 's|^.*<seg>||;s|</seg>.*$$||;' | \
	  	wc -w >> $@; )
	chmod 644 $@




delete-empty-bitexts:
	mkdir -p ${CORPUSHOME}/DELETE/xml
	for s in ${LANGUAGES}; do \
	  for t in ${LANGUAGES}; do \
	    if [ -e ${CORPUSXML}/$$s-$$t.xml.gz ]; then \
	      if [ `zgrep xtargets ${CORPUSXML}/$$s-$$t.xml.gz | wc -l` == "0" ]; then \
		echo "empty bitext: $$s-$$t"; \
		mv -f ${CORPUSXML}/$$s-$$t.xml.gz ${CORPUSHOME}/DELETE/xml/; \
		rm -f ${CORPUSRELEASE}/xml/$$s-$$t.xml.gz; \
		rm -f ${CORPUSRELEASE}/moses/$$s-$$t.txt.zip; \
		rm -f ${CORPUSRELEASE}/dic/$$s-$$t.dic.gz; \
		rm -f ${CORPUSRELEASE}/smt/$$s-$$t.zip; \
		rm -f ${CORPUSRELEASE}/smt/$$s-$$t.alg.zip; \
		rm -f ${CORPUSRELEASE}/info/$$s-$$t.*info; \
	      fi \
	    fi; \
	    for f in 	${CORPUSRELEASE}/moses/$$s-$$t.txt.zip \
			${CORPUSRELEASE}/dic/$$s-$$t.dic.gz \
			${CORPUSRELEASE}/smt/$$s-$$t.zip \
			${CORPUSRELEASE}/smt/$$s-$$t.alg.zip; do \
	      if [ -e $$f ]; then \
	        if [ ! -e ${CORPUSXML}/$$s-$$t.xml.gz ]; then \
		  echo "delete extra file $$f"; \
		  rm -f $$f; \
		  rm -f ${CORPUSRELEASE}/info/$$s-$$t.*info; \
	        fi \
	      fi; \
	    done; \
	    if [ -e ${CORPUSRELEASE}/xml/$$s-$$t.xml.gz ]; then \
	      if [ `zgrep xtargets ${CORPUSRELEASE}/xml/$$s-$$t.xml.gz | wc -l` == "0" ]; then \
		echo "empty bitext: $$s-$$t"; \
		rm -f ${CORPUSRELEASE}/xml/$$s-$$t.xml.gz; \
		rm -f ${CORPUSRELEASE}/moses/$$s-$$t.txt.zip; \
		rm -f ${CORPUSRELEASE}/dic/$$s-$$t.dic.gz; \
		rm -f ${CORPUSRELEASE}/smt/$$s-$$t.zip; \
		rm -f ${CORPUSRELEASE}/smt/$$s-$$t.alg.zip; \
		rm -f ${CORPUSRELEASE}/info/$$s-$$t.*info; \
	      fi \
	    fi; \
	  done \
	done
	${MAKE} delete-empty-sample-files

delete-empty-corpora:
	mkdir -p ${CORPUSHOME}/DELETE/xml
	mkdir -p ${CORPUSHOME}/DELETE/raw
	mkdir -p ${CORPUSHOME}/DELETE/parsed
	for s in ${LANGUAGES}; do \
	    if [ -e ${CORPUSRELEASE}/mono/$$s.txt.gz ]; then \
	      if [ `zcat ${CORPUSRELEASE}/mono/$$s.txt.gz | wc -l` == "0" ]; then \
		echo "empty corpus: $$s"; \
		rm -f ${CORPUSRELEASE}/mono/$$s.txt.gz; \
		rm -f ${CORPUSRELEASE}/mono/$$s.tok.gz; \
		rm -f ${CORPUSRELEASE}/info/$$s.info; \
		rm -f ${CORPUSRELEASE}/freq/$$s.freq.gz; \
		rm -f ${CORPUSRELEASE}/parsed/$$s.zip; \
		rm -f ${CORPUSRELEASE}/raw/$$s.zip; \
		rm -f ${CORPUSRELEASE}/xml/$$s.zip; \
		rm -f ${CORPUSRELEASE}/truecaser/$$s.gz; \
		mv -f ${CORPUSHOME}/xml/$$s ${CORPUSHOME}/DELETE/xml/; \
		mv -f ${CORPUSHOME}/raw/$$s ${CORPUSHOME}/DELETE/raw/; \
		mv -f ${CORPUSHOME}/parsed/$$s ${CORPUSHOME}/DELETE/parsed/; \
	      fi \
	    fi \
	done


delete-empty-sample-files:
	for s in ${LANGUAGES}; do \
	  if [ -e ${CORPUSPUB}/$$s\_sample.html ]; then \
	    if [ ! -e ${CORPUSRELEASE}/xml/$$s.zip ]; then \
		echo "delete sample for $$s"; \
		rm -f ${CORPUSPUB}/$$s\_sample.html; \
	    fi \
	  fi; \
	  for t in ${LANGUAGES}; do \
	    if [ -e ${CORPUSPUB}/$$s-$$t\_sample.html ]; then \
	      if [ ! -e ${CORPUSRELEASE}/xml/$$s-$$t.xml.gz ]; then \
		echo "delete sample for $$s-$$t"; \
		rm -f ${CORPUSPUB}/$$s-$$t\_sample.html; \
	      fi \
	    fi \
	  done; \
	done
