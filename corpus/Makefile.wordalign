# -*-makefile-*-
#
# wordalign bitexts using GIZA++ & Moses
#


# SRC=en
# TRG=eo

# max_phr_length ... for phrase tabel extraction
# alignment ........ default alignment symmetrization heuristics
# alignments ....... other symmetrization heuristics that will be used

MAX_PHR_LENGTH = 7
ALIGNMENT      = grow-diag-final-and
ALIGNMENTS     = intersect grow
# ALIGNMENTS     = srctotgt tgttosrc intersect grow

# parameters for corpus cleaning (min & max sentence lengths)

MIN = 1
MAX = 100
# MAX = 80

OPUS2MOSES = $(UPLUGHOME)/tools/xces2moses

# all language pairs in the corpus

LANGPAIRS = $(patsubst $(CORPUSXML)/%.xml.gz,%,\
			$(wildcard $(CORPUSXML)/*-*.xml.gz))

# truecaser models
#   TRUECASER_GZ - gzipped model files (that we like to keep after word alignment)
#   TRUECASER - model files used when creating the truecased bitext

TRUECASER_GZ = $(patsubst %,${CORPUSWORDALIGN}/truecaser/%.gz, ${LANGUAGES})
TRUECASER    = $(patsubst %,${CORPUSWORDALIGN}/truecaser/%, ${LANGUAGES})

# monolingual text files for language modeling
# (TODO: still needed here? isn't it moved to Makefile.html?)

LMTEXT = $(patsubst %,${CORPUSWORDALIGN}/lm/${CORPUS}.%.gz, ${LANGUAGES})
LMRAWTEXT = $(patsubst %,${CORPUSWORDALIGN}/lm/${CORPUS}.raw.%.gz, ${LANGUAGES})


.PHONY: all-wordalign
all-wordalign: ${TRUECASER} ${LANGPAIRS} clean

${LANGPAIRS}:
	-make 	SRC=$(firstword $(subst -, ,$@)) \
		TRG=$(lastword $(subst -, ,$@)) \
		wordalign


# make it possible to align bitexts with identical SRC and TRG language as well!
# SRCEXT and TRGEXT will add a suffix 1 and 2 as used in the plain text package in OPUS

.PHONY: wordalign
wordalign: truecaser
	if [ "${SRC}" != "${TRG}" ]; then \
	  ${MAKE} SRCEXT=$(SRC) TRGEXT=$(TRG) ${SRC}-${TRG}/model/phrase-table-filtered.gz; \
	else \
	  ${MAKE} SRCEXT=$(SRC)1 TRGEXT=$(TRG)2 ${SRC}-${TRG}/model/phrase-table-filtered.gz; \
	fi

# wordalign: truecaser ${SRC}-${TRG}/model/phrase-table.gz

.PHONY: all-monolingual all-raw-monolingual
all-monolingual: ${LMTEXT}
all-raw-monolingual: ${LMRAWTEXT}


# clean: take aware unpacked truecaser model files
# - don't do that when aligning individual language pairs!
# - several language pairs will depend on the same truecaser model!

.PHONY: clean
clean:
	rm -f ${TRUECASER}

.PHONY: alignments
alignments:
	for a in ${ALIGNMENTS}; do \
		make ALIGNMENT=$$a ${SRC}-${TRG}/model/aligned.$$a.gz; \
	done
	gzip ${SRC}-${TRG}/model/aligned.${ALIGNMENT}


# extract phrases and create phrase-table

${SRC}-${TRG}/model/phrase-table.gz: ${SRC}-${TRG}/model/aligned.${ALIGNMENT}.gz
	${SCRIPTS_ROOTDIR}/training/train-model.perl \
		-parallel \
		-external-bin-dir=${HOME}/projects/SMT/bin \
		-max-phrase-length=${MAX_PHR_LENGTH} \
		-scripts-root-dir ${SCRIPTS_ROOTDIR} \
		-root-dir ${SRC}-${TRG} \
		-temp-dir tmp \
		-corpus ${SRC}-${TRG}/c.true -f ${SRCEXT} -e ${TRGEXT} \
		-alignment ${ALIGNMENT} \
		--do-steps 4-6
	${MAKE} alignments
	${MAKE} cleanup


# create clean and truecased data (source and target language)

${SRC}-${TRG}/c.true.${SRCEXT}.gz: ${CORPUSXML}/${SRC}-${TRG}.xml.gz
	make ${SRC}-${TRG} tmp
	$(OPUS2MOSES) -d ${CORPUSXML} -s ${SRCEXT} -t ${TRGEXT} \
		-p ${SRC}-${TRG}/ids.txt \
		$< ${SRC}-${TRG}/c
	${SCRIPTS_ROOTDIR}/training/clean-corpus-n.perl \
		${SRC}-${TRG}/c ${SRCEXT} ${TRGEXT} \
		${SRC}-${TRG}/c.clean ${MIN} ${MAX} \
		${SRC}-${TRG}/line_numbers.txt
	${OPUSTOOLS}/wordalign/retained-sentences.pl \
		${SRC}-${TRG}/ids.txt \
		${SRC}-${TRG}/line_numbers.txt |\
		gzip -c > ${SRC}-${TRG}/ids.gz
	rm -f ${SRC}-${TRG}/ids.txt ${SRC}-${TRG}/line_numbers.txt
	${MAKE} ${CORPUSWORDALIGN}/truecaser/${SRC}
	${TOOLS}/public/preprocess/recaser/mytruecase.perl \
                -model ${CORPUSWORDALIGN}/truecaser/${SRC} \
		< ${SRC}-${TRG}/c.clean.${SRCEXT} \
		> ${SRC}-${TRG}/c.true.${SRCEXT} 2>/dev/null
	${MAKE} ${CORPUSWORDALIGN}/truecaser/${TRG}
	${TOOLS}/public/preprocess/recaser/mytruecase.perl \
                -model ${CORPUSWORDALIGN}/truecaser/${TRG} \
		< ${SRC}-${TRG}/c.clean.${TRGEXT} \
		> ${SRC}-${TRG}/c.true.${TRGEXT} 2>/dev/null
	gzip -f ${SRC}-${TRG}/c.true.${SRCEXT}
	gzip -f ${SRC}-${TRG}/c.true.${TRGEXT}
	rm -f ${SRC}-${TRG}/c.${SRCEXT} ${SRC}-${TRG}/c.${TRGEXT}
	rm -f ${SRC}-${TRG}/c.clean.${SRCEXT} ${SRC}-${TRG}/c.clean.${TRGEXT}


# symmetrised word alignments

${SRC}-${TRG}/model/aligned.${ALIGNMENT}.gz: ${SRC}-${TRG}/model/aligned.srctotgt.gz
	gzip -cd < ${SRC}-${TRG}/model/aligned.srctotgt.gz > $@.s2t
	gzip -cd < ${SRC}-${TRG}/model/aligned.tgttosrc.gz > $@.t2s
	$(ATOOLS) -c ${ALIGNMENT} -i $@.s2t -j $@.t2s | gzip -c > $@
	rm -f $@.s2t $@.t2s


# wordalignment with efmaral (both directions)

${SRC}-${TRG}/model/aligned.srctotgt.gz: ${SRC}-${TRG}/c.true.${SRCEXT}.gz
	mkdir -p $(dir $@)
	gzip -cd ${SRC}-${TRG}/c.true.${SRCEXT}.gz > $@.${SRCEXT}
	gzip -cd ${SRC}-${TRG}/c.true.${TRGEXT}.gz > $@.${TRGEXT}
	${MOSESSCRIPTS}/training/wrappers/make-factor-stem.perl 4 \
		$@.${SRCEXT} $@.stem4.${SRCEXT}
	${MOSESSCRIPTS}/training/wrappers/make-factor-stem.perl 4 \
		$@.${TRGEXT} $@.stem4.${TRGEXT}
	paste -d ' ||| ' $@.stem4.${SRCEXT} /dev/null /dev/null /dev/null /dev/null $@.stem4.${TRGEXT} > $@.bitext
	${EFMARAL} -i $@.bitext > ${SRC}-${TRG}/model/aligned.srctotgt
	${EFMARAL} -i $@.bitext -r > ${SRC}-${TRG}/model/aligned.tgttosrc
	gzip -f ${SRC}-${TRG}/model/aligned.srctotgt
	gzip -f ${SRC}-${TRG}/model/aligned.tgttosrc
	rm -f $@.${SRCEXT} $@.${TRGEXT} 
	rm -f $@.stem4.${SRCEXT} $@.stem4.${TRGEXT} $@.bitext



# grep phrase pairs with only alphabetic characters and freq>1 for both
# sort numerically on score 1

${SRC}-${TRG}/phrases-alpha.gz: ${SRC}-${TRG}/model/phrase-table.gz
	( export LC_ALL=en_US.UTF-8; \
	gzip -cd $< | \
	egrep -i '^[[:alpha:] ]+\|\|\|[[:alpha:] ]+\|\|\|' |\
	cut -f1,4,7,13 -d '|' | \
	egrep -v '\| 1 [0-9]*$$' | \
	egrep -v '\| [0-9]* 1$$' | \
	LC_ALL=C sort -t '|' -k 3.1gr,1 |\
	gzip -c > $@ )


cleanup:
	rm -f ${SRC}-${TRG}/c.${SRC} ${SRC}-${TRG}/c.${TRG}
	rm -f ${SRC}-${TRG}/c.${SRCEXT} ${SRC}-${TRG}/c.${TRGEXT}
	rm -f ${SRC}-${TRG}/c.clean.*
	rm -f ${SRC}-${TRG}/model/extract*
	rm -f ${SRC}-${TRG}/model/tmp.*
	rm -fr ${SRC}-${TRG}/corpus
	rm -fr ${SRC}-${TRG}/giza.*

#	rm -f ${SRC}-${TRG}/model/lex*
# 	-gzip ${SRC}-${TRG}/c.true.*


#	-gzip ${SRC}-${TRG}/line_numbers.txt
#	rm -f ${SRC}-${TRG}/giza*/*.cooc
#	rm -f ${SRC}-${TRG}/c.*

${SRC}-${TRG}: 
	mkdir -p ${CORPUSWORDALIGN}/${SRC}-${TRG}
	ln -s ${CORPUSWORDALIGN}/${SRC}-${TRG} ${SRC}-${TRG}

tmp: 
	mkdir -p ${CORPUSWORDALIGN}/tmp
	ln -s ${CORPUSWORDALIGN}/tmp tmp


#-----------------------------
# train truecaser models
#-----------------------------


# train truecaser model for all languages

all-truecaser: ${TRUECASER}

# train truecaser model for source and target language

truecaser: 	${CORPUSWORDALIGN}/truecaser/${SRC} \
		${CORPUSWORDALIGN}/truecaser/${TRG}

# a very simplistic way of changing tokenized XML to plain text

${CORPUSWORDALIGN}/truecaser/%.txt: ${CORPUSXML}/%
	mkdir -p `dirname $@`
	find $< -name '*.xml.gz' | \
	xargs zcat | \
	perl -p -e 'chomp;s/<\/s>/\n/;' | \
	grep -v '^ *$$' | \
	sed	-e 's/<[^>]*>//g' \
		-e 's/  */ /g' \
		-e 's/\&gt;/>/g' \
		-e 's/\&lt;/</g' \
		-e 's/\&amp;/&/g' \
		-e 's/\&quot;/"/g' \
		-e "s/\&apos;/'/g" | \
	sed 	-e 's/^ *//' \
		-e 's/ *$$//' > $@

${TRUECASER_GZ}:
	mkdir -p `dirname $@`
	make $(patsubst %.gz, %.txt,$@)
	${TOOLS}/public/preprocess/recaser/my-train-truecaser.perl \
		--corpus $(patsubst %.gz, %.txt,$@) \
		--model $@.tmp
	gzip -f $@.tmp
	mv $@.tmp.gz $@
	rm -f $(patsubst %.gz, %.txt,$@)

${TRUECASER}: %: %.gz
	gzip -cd $< > $@


# monolingual data for language modeling

${CORPUSWORDALIGN}/lm/${CORPUS}.%.gz: ${CORPUSXML}/%
	mkdir -p `dirname $@`
	find $< -name '*.xml.gz' | \
	xargs zcat | \
	perl ${TOOLS}/opus/xml2txt.pl | \
	sed 's/  */ /g;s/^ *//;s/ *$$//' |\
	gzip -c > $@


${CORPUSWORDALIGN}/lm/${CORPUS}.raw.%.gz: ${CORPUSRAW}/%
	mkdir -p `dirname $@`
	find $< -name '*.xml.gz' | \
	xargs zcat | \
	perl ${TOOLS}/opus/xml2txt.pl | \
	sed 's/  */ /g;s/^ *//;s/ *$$//' |\
	gzip -c > $@




###########################################################################
#
# filter phrase tables
#
###########################################################################

PHRASETABLES = $(patsubst %/phrase-table.gz,%/phrase-table-filtered.gz,\
		$(wildcard */model/phrase-table.gz))

SMTTOOLSHOME = ${HOME}/projects/SMT
SMTTOOLS     = ${SMTTOOLSHOME}/tools

MOSESHOME    = ${SMTTOOLSHOME}/mosesdecoder
MOSESCONTRIB = ${MOSESHOME}/contrib

.PHONY: filter-all-phrase-tables
filter-all-phrase-tables: $(PHRASETABLES)

.PHONY:
filter-phrase-table: ${SRC}-${TRG}/model/phrase-table-filtered.gz

%/phrase-table-filtered.gz: %.src.sa_suffix %.trg.sa_suffix %/phrase-table.gz
	zcat $(subst -filtered,,$@) | \
	${MOSESCONTRIB}/sigtest-filter/filter-pt \
		-f $< \
		-e $(subst src,trg,$<) \
		-l a+e -n 30 |\
	gzip -c > $@
	rm -f $<* $(subst src,trg,$<)*
	rm -f $^

# create suffix arrays for the bitext (training corpus)

%.src.sa_suffix:
	if [ $(word 1,$(subst -, ,$@)) != $(word 2,$(subst -, ,$(subst /, ,$@))) ]; then \
	  gzip -cd < $(dir $@)c.true.$(word 1,$(subst -, ,$@)).gz > $@; \
	else \
	  gzip -cd < $(dir $@)c.true.$(word 1,$(subst -, ,$@))1.gz > $@; \
	fi
	${SMTTOOLS}/SALM/Bin/Linux/Index/IndexSA.O32 $@

%.trg.sa_suffix:
	if [ $(word 1,$(subst -, ,$@)) != $(word 2,$(subst -, ,$(subst /, ,$@))) ]; then \
	  gzip -cd < $(dir $@)c.true.$(word 2,$(subst -, ,$(subst /, ,$@))).gz > $@; \
	else \
	  gzip -cd < $(dir $@)c.true.$(word 2,$(subst -, ,$(subst /, ,$@)))2.gz > $@; \
	fi
	${SMTTOOLS}/SALM/Bin/Linux/Index/IndexSA.O32 $@






#########################################
## make some missing files .....
#########################################


# make the clean, truecased corpus once again and check
# if this the same as last time (when running GIZA++)

make-corpus:
	$(OPUS2MOSES) -d ${CORPUSXML} -s ${SRC} -t ${TRG} \
		${CORPUSXML}/${SRC}-${TRG}.xml.gz ${SRC}-${TRG}/c
	${SCRIPTS_ROOTDIR}/training/clean-corpus-n.perl \
		${SRC}-${TRG}/c ${SRC} ${TRG} \
		${SRC}-${TRG}/c.clean ${MIN} ${MAX} \
		${SRC}-${TRG}/line_numbers_new.txt
	${TOOLS}/public/preprocess/recaser/mytruecase.perl \
                -model ${CORPUSWORDALIGN}/truecaser/${SRC} \
		< ${SRC}-${TRG}/c.clean.${SRC} \
		> ${SRC}-${TRG}/c.true.${SRC} 2>/dev/null
	${TOOLS}/public/preprocess/recaser/mytruecase.perl \
                -model ${CORPUSWORDALIGN}/truecaser/${TRG} \
		< ${SRC}-${TRG}/c.clean.${TRG} \
		> ${SRC}-${TRG}/c.true.${TRG} 2>/dev/null
	-gunzip ${SRC}-${TRG}/line_numbers.txt.gz
	diff 	${SRC}-${TRG}/line_numbers.txt \
		${SRC}-${TRG}/line_numbers_new.txt \
		> ${SRC}-${TRG}/line_numbers.diff
	@if [ -s ${SRC}-${TRG}/line_numbers.diff ]; then \
		echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"; \
		echo "!!!!! WARNING ! clean-corpus made a difference for ${SRC}-${TRG}"; \
		echo "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"; \
		gzip ${SRC}-${TRG}/line_numbers.txt; \
		gzip ${SRC}-${TRG}/line_numbers_new.txt; \
		gzip ${SRC}-${TRG}/line_numbers.diff; \
		rm -f ${SRC}-${TRG}/c.*; \
		exit 1; \
	fi
	rm -f ${SRC}-${TRG}/line_numbers_new.txt
	rm -f ${SRC}-${TRG}/line_numbers.diff


id-file: ${SRC}-${TRG}/ids.txt

${SRC}-${TRG}/ids.txt: ${CORPUSXML}/${SRC}-${TRG}.xml.gz
	make ${SRC}-${TRG} tmp
	$(OPUS2MOSES) -d ${CORPUSXML} -s ${SRC} -t ${TRG} \
		-p ${SRC}-${TRG}/ids.txt \
		$< ${SRC}-${TRG}/c
	${SCRIPTS_ROOTDIR}/training/clean-corpus-n.perl \
		${SRC}-${TRG}/c ${SRC} ${TRG} \
		${SRC}-${TRG}/c.clean ${MIN} ${MAX} \
		${SRC}-${TRG}/line_numbers.txt
	${OPUSTOOLS}/wordalign/retained-sentences.pl \
		${SRC}-${TRG}/ids.txt \
		${SRC}-${TRG}/line_numbers.txt |\
		gzip -c > ${SRC}-${TRG}/ids.gz
	rm -f ${SRC}-${TRG}/ids.txt ${SRC}-${TRG}/line_numbers.txt










### old: alignment with GIZA++ and standard Moses pipeline


# convert from XML to Moses format
# run clean-corpus
# run truecaser
# make Moses steps 1-6
# extract other alignment heuristics
# cleanup

#	rm -fr ${SRC}-${TRG}/*

# ${SRC}-${TRG}/model/phrase-table.gz: ${CORPUSXML}/${SRC}-${TRG}.xml.gz
# 	make ${SRC}-${TRG} tmp
# 	$(OPUS2MOSES) -d ${CORPUSXML} -s ${SRCEXT} -t ${TRGEXT} \
# 		-p ${SRC}-${TRG}/ids.txt \
# 		$< ${SRC}-${TRG}/c
# 	${SCRIPTS_ROOTDIR}/training/clean-corpus-n.perl \
# 		${SRC}-${TRG}/c ${SRCEXT} ${TRGEXT} \
# 		${SRC}-${TRG}/c.clean ${MIN} ${MAX} \
# 		${SRC}-${TRG}/line_numbers.txt
# 	${OPUSTOOLS}/wordalign/retained-sentences.pl \
# 		${SRC}-${TRG}/ids.txt \
# 		${SRC}-${TRG}/line_numbers.txt |\
# 		gzip -c > ${SRC}-${TRG}/ids.gz
# 	rm -f ${SRC}-${TRG}/ids.txt ${SRC}-${TRG}/line_numbers.txt
# 	${MAKE} ${CORPUSWORDALIGN}/truecaser/${SRC}
# 	${TOOLS}/public/preprocess/recaser/mytruecase.perl \
#                 -model ${CORPUSWORDALIGN}/truecaser/${SRC} \
# 		< ${SRC}-${TRG}/c.clean.${SRCEXT} \
# 		> ${SRC}-${TRG}/c.true.${SRCEXT} 2>/dev/null
# 	${MAKE} ${CORPUSWORDALIGN}/truecaser/${TRG}
# 	${TOOLS}/public/preprocess/recaser/mytruecase.perl \
#                 -model ${CORPUSWORDALIGN}/truecaser/${TRG} \
# 		< ${SRC}-${TRG}/c.clean.${TRGEXT} \
# 		> ${SRC}-${TRG}/c.true.${TRGEXT} 2>/dev/null
# 	${MAKE} ${SRC}-${TRG}/model/aligned.${ALIGNMENT}.gz
# 	${SCRIPTS_ROOTDIR}/training/train-model.perl \
# 		-parallel \
# 		-external-bin-dir=${HOME}/projects/SMT/bin \
# 		-max-phrase-length=${MAX_PHR_LENGTH} \
# 		-scripts-root-dir ${SCRIPTS_ROOTDIR} \
# 		-root-dir ${SRC}-${TRG} \
# 		-temp-dir tmp \
# 		-corpus ${SRC}-${TRG}/c.true -f ${SRCEXT} -e ${TRGEXT} \
# 		-alignment ${ALIGNMENT} \
# 		--first-step 4 \
# 		--last-step 6
# 	${MAKE} alignments
# 	${MAKE} cleanup


# from old Moses:
#
# 		-phrase-word-alignment \


# ${SRC}-${TRG}/model/aligned.${ALIGNMENT}.gz:
# 	${SCRIPTS_ROOTDIR}/training/train-model.perl \
# 		-scripts-root-dir ${SCRIPTS_ROOTDIR} \
# 		-root-dir ${SRC}-${TRG} \
# 		-temp-dir tmp \
# 		-corpus ${SRC}-${TRG}/c.true -f ${SRCEXT} -e ${TRGEXT} \
# 		-alignment ${ALIGNMENT} \
# 		--do-steps 3
# 	gzip ${SRC}-${TRG}/model/aligned.${ALIGNMENT}


