# -*-makefile-*-
#
# wordalign bitexts using efmaral & Moses
#

ifndef SRC
  SRC = en
endif
ifndef TRG
  TRG = fr
endif

ifndef LANGPAIR
  LANGPAIR=${SRC}-${TRG}
endif

# make it possible to align bitexts with identical SRC and TRG language as well!
# SRCEXT and TRGEXT will add a suffix 1 and 2 as used in the plain text package in OPUS

ifeq (${SRC},$(TRG))
  SRCEXT=${SRC}1
  TRGEXT=${SRC}2
else
  SRCEXT=${SRC}
  TRGEXT=${TRG}
endif

## set CORPUSBASE depending on preprocessing to be done
## - c.true  = cleanup and truecasing
## - c.clean = cleanup
## - c       = all (no cleanup nor truecasing)

# CORPUSBASE = c
# CORPUSBASE = c.true
CORPUSBASE = c.clean

# try to guess memory and time consumption for batch jobs
# (based on size on source language tokens)

CORPUS_SIZE = ${shell sed -n '2p' ${CORPUSHOME}/xml/${LANGPAIR}.txt.info}
ALIGN_MEM = ${shell \
	if [ ${CORPUS_SIZE} -gt 100000000 ]; then \
	  echo "250g"; \
	elif [ ${CORPUS_SIZE} -gt 10000000 ]; then \
	  echo "120g"; \
	elif [ ${CORPUS_SIZE} -gt 5000000 ]; then \
	  echo "64g"; \
	elif [ ${CORPUS_SIZE} -gt 1000000 ]; then \
	  echo "32g"; \
	else \
	  echo "16g"; \
	fi }
ALIGN_TIME = ${shell \
	if [ ${CORPUS_SIZE} -gt 100000000 ]; then \
	  echo "72"; \
	elif [ ${CORPUS_SIZE} -gt 10000000 ]; then \
	  echo "48"; \
	elif [ ${CORPUS_SIZE} -gt 5000000 ]; then \
	  echo "12"; \
	elif [ ${CORPUS_SIZE} -gt 1000000 ]; then \
	  echo "6"; \
	else \
	  echo "4"; \
	fi }

# max_phr_length ... for phrase tabel extraction
# alignment ........ default alignment symmetrization heuristics
# alignments ....... other symmetrization heuristics that will be used

MAX_PHR_LENGTH = 7
ALIGNMENT      = grow-diag-final-and
ALIGNMENTS     = intersect grow-diag grow-diag-final

# parameters for corpus cleaning (min & max sentence lengths)

MIN = 1
MAX = 100
# MAX = 80

OPUS2MOSES = $(UPLUGHOME)/tools/xces2moses

# all language pairs in the corpus

LANGPAIRS = $(patsubst $(CORPUSXML)/%.xml.gz,%,\
			$(wildcard $(CORPUSXML)/*-*.xml.gz))

# truecaser models
#   TRUECASER_GZ - gzipped model files (that we like to keep after word alignment)
#   TRUECASER - model files used when creating the truecased bitext

TRUECASER_GZ = $(patsubst %,${CORPUSWORDALIGN}/truecaser/%.gz, ${LANGUAGES})
TRUECASER    = $(patsubst %,${CORPUSWORDALIGN}/truecaser/%, ${LANGUAGES})

# monolingual text files for language modeling
# (TODO: still needed here? isn't it moved to Makefile.html?)

LMTEXT = $(patsubst %,${CORPUSWORDALIGN}/lm/${CORPUS}.%.gz, ${LANGUAGES})
LMRAWTEXT = $(patsubst %,${CORPUSWORDALIGN}/lm/${CORPUS}.raw.%.gz, ${LANGUAGES})


.PHONY: all-wordalign
all-wordalign: ${LANGPAIRS} clean
# all-wordalign: ${TRUECASER} ${LANGPAIRS} clean


## submit batch jobs of various kinds
## - do prepare first
## - align requires more memory! (second step after prepare is done)
## - tm creates the phrase tables and requires less memory!

.PHONY: submit-all-prepare 
submit-all-prepare:
	${MAKE} ACTION=wordalign-prepare submit-all

.PHONY: submit-all-align
submit-all-align:
	${MAKE} ACTION=wordalign-align submit-all

.PHONY: submit-all-tm
submit-all-tm:
	${MAKE} ACTION=wordalign submit-all

.PHONY: submit-all
submit-all:
	for l in ${LANGPAIRS}; do \
	  ${MAKE} LANGPAIR=$$l submit-${ACTION}; \
	done

# batch job for preparing the corpus data
# --> single core, little memory
.PHONY: submit-wordalign-prepare
submit-wordalign-prepare:
	if [ ! -e ${LANGPAIR}/.wordalign-prepare ]; then \
	  rm -f ${LANGPAIR}.submit; \
	  ${MAKE} HPC_TIME=${ALIGN_TIME}:00 \
		  HPC_MEM=4g \
		  EMAIL= \
		  MAKEARGS="ACTION=wordalign-prepare" \
	  ${LANGPAIR}.submit;\
	fi

# batch job for word alignment
# --> high memory consumption!
.PHONY: submit-wordalign-align
submit-wordalign-align:
	if [ ! -e ${LANGPAIR}/.wordalign-align ]; then \
	  rm -f ${LANGPAIR}.submit; \
	  ${MAKE} HPC_TIME=${ALIGN_TIME}:00 \
		  HPC_MEM=${ALIGN_MEM} \
		  HPC_CORES=4 \
		  HPC_MODULES=python-env/3.4.1 \
		  EMAIL= \
		  MAKEARGS="ACTION=wordalign-align" \
	  ${LANGPAIR}.submit;\
	fi

# batch job for creating filtered phrase-tables
# (assume that word alignment is done already!)
.PHONY: submit-wordalign
submit-wordalign:
	if [ ! -e ${LANGPAIR}/.wordalign-align ]; then \
	  echo "run alignment for ${LANGPAIR} first!"; \
	elif [ ! -e ${LANGPAIR}/.wordalign ]; then \
	  rm -f ${LANGPAIR}.submit; \
	  ${MAKE} HPC_TIME=${ALIGN_TIME}:00 \
		  HPC_CORES=4 \
		  EMAIL= \
		  MAKEARGS="ACTION=wordalign" \
	  ${LANGPAIR}.submit;\
	fi





# action to be done when calling LANGPAIRS
ACTION = wordalign

${LANGPAIRS}: %: %/.${ACTION}

## NEW: remove empty files before runing action
%/.${ACTION}:
	mkdir -p ${CORPUSWORDALIGN}/${@:/.${ACTION}=}
	if [ ! -e ${@:/.${ACTION}=} ]; then \
	  ln -s ${CORPUSWORDALIGN}/${@:/.${ACTION}=} ${@:/.${ACTION}=}; \
	fi
	find ${dir $@} -type f -empty ! -iname '.*'
	${MAKE} SRC=$(firstword $(subst -, ,${@:/.${ACTION}=})) \
		TRG=$(lastword $(subst -, ,${@:/.${ACTION}=})) \
	${ACTION}
	touch $@


## define some actions (prepare, align, ...)

.PHONY: wordalign-prepare
wordalign-prepare: ${SRC}-${TRG}/${CORPUSBASE}.${SRCEXT}.gz

.PHONY: wordalign-align
wordalign-align: ${SRC}-${TRG}/model/aligned.${ALIGNMENT}.gz

.PHONY: wordalign
wordalign: ${SRC}-${TRG}/model/phrase-table-filtered.gz




.PHONY: all-monolingual all-raw-monolingual
all-monolingual: ${LMTEXT}
all-raw-monolingual: ${LMRAWTEXT}


# clean: take aware unpacked truecaser model files
# - don't do that when aligning individual language pairs!
# - several language pairs will depend on the same truecaser model!

.PHONY: clean
clean:
	rm -f ${TRUECASER}

.PHONY: alignments
alignments:
	for a in ${ALIGNMENTS}; do \
		make ALIGNMENT=$$a ${SRC}-${TRG}/model/aligned.$$a.gz; \
	done
	gzip ${SRC}-${TRG}/model/aligned.${ALIGNMENT}


# extract phrases and create phrase-table

${SRC}-${TRG}/model/phrase-table.gz: ${SRC}-${TRG}/model/aligned.${ALIGNMENT}.gz
	mkdir -p ${dir $@}
	gzip -cd ${SRC}-${TRG}/${CORPUSBASE}.${SRCEXT}.gz > $@.${SRCEXT}
	gzip -cd ${SRC}-${TRG}/${CORPUSBASE}.${TRGEXT}.gz > $@.${TRGEXT}
	${SCRIPTS_ROOTDIR}/training/train-model.perl \
		-parallel \
		-external-bin-dir=${HOME}/projects/SMT/bin \
		-max-phrase-length=${MAX_PHR_LENGTH} \
		-scripts-root-dir ${SCRIPTS_ROOTDIR} \
		-root-dir ${SRC}-${TRG} \
		-temp-dir tmp \
		-corpus $@ -f ${SRCEXT} -e ${TRGEXT} \
		-alignment ${ALIGNMENT} \
		--do-steps 4-6
	gzip -f ${SRC}-${TRG}/model/lex.*
	rm -f $@.${SRCEXT} $@.${TRGEXT}
	${MAKE} alignments
	${MAKE} cleanup


# create clean and truecased data (source and target language)

${SRC}-${TRG}/c.true.${SRCEXT}.gz: ${CORPUSXML}/${SRC}-${TRG}.xml.gz
	mkdir -p ${dir $@}
	$(OPUS2MOSES) -d ${CORPUSXML} -s ${SRCEXT} -t ${TRGEXT} \
		-p ${SRC}-${TRG}/ids.txt \
		$< ${SRC}-${TRG}/c
	${SCRIPTS_ROOTDIR}/training/clean-corpus-n.perl \
		${SRC}-${TRG}/c ${SRCEXT} ${TRGEXT} \
		${SRC}-${TRG}/c.clean ${MIN} ${MAX} \
		${SRC}-${TRG}/line_numbers.txt
	${OPUSTOOLS}/wordalign/retained-sentences.pl \
		${SRC}-${TRG}/ids.txt \
		${SRC}-${TRG}/line_numbers.txt |\
		gzip -c > ${SRC}-${TRG}/ids.gz
	rm -f ${SRC}-${TRG}/ids.txt ${SRC}-${TRG}/line_numbers.txt
	${MAKE} ${CORPUSWORDALIGN}/truecaser/${SRC}
	${TOOLS}/public/preprocess/recaser/mytruecase.perl \
                -model ${CORPUSWORDALIGN}/truecaser/${SRC} \
		< ${SRC}-${TRG}/c.clean.${SRCEXT} \
		> ${SRC}-${TRG}/c.true.${SRCEXT} 2>/dev/null
	${MAKE} ${CORPUSWORDALIGN}/truecaser/${TRG}
	${TOOLS}/public/preprocess/recaser/mytruecase.perl \
                -model ${CORPUSWORDALIGN}/truecaser/${TRG} \
		< ${SRC}-${TRG}/c.clean.${TRGEXT} \
		> ${SRC}-${TRG}/c.true.${TRGEXT} 2>/dev/null
	gzip -f ${SRC}-${TRG}/c.true.${SRCEXT}
	gzip -f ${SRC}-${TRG}/c.true.${TRGEXT}
	rm -f ${SRC}-${TRG}/c.${SRCEXT} ${SRC}-${TRG}/c.${TRGEXT}
	rm -f ${SRC}-${TRG}/c.clean.${SRCEXT} ${SRC}-${TRG}/c.clean.${TRGEXT}

# without truecasing

${SRC}-${TRG}/c.clean.${SRCEXT}.gz: ${CORPUSXML}/${SRC}-${TRG}.xml.gz
	mkdir -p ${dir $@}
	$(OPUS2MOSES) -d ${CORPUSXML} -s ${SRCEXT} -t ${TRGEXT} \
		-p ${SRC}-${TRG}/ids.txt \
		$< ${SRC}-${TRG}/c
	${SCRIPTS_ROOTDIR}/training/clean-corpus-n.perl \
		${SRC}-${TRG}/c ${SRCEXT} ${TRGEXT} \
		${SRC}-${TRG}/c.clean ${MIN} ${MAX} \
		${SRC}-${TRG}/line_numbers.txt
	${OPUSTOOLS}/wordalign/retained-sentences.pl \
		${SRC}-${TRG}/ids.txt \
		${SRC}-${TRG}/line_numbers.txt |\
		gzip -c > ${SRC}-${TRG}/ids.gz
	rm -f ${SRC}-${TRG}/ids.txt ${SRC}-${TRG}/line_numbers.txt
	rm -f ${SRC}-${TRG}/c.${SRCEXT} ${SRC}-${TRG}/c.${TRGEXT}
	gzip -f ${SRC}-${TRG}/c.clean.${SRCEXT} ${SRC}-${TRG}/c.clean.${TRGEXT}



# without truecasing nor cleaning

${SRC}-${TRG}/c.${SRCEXT}.gz: ${CORPUSXML}/${SRC}-${TRG}.xml.gz
	mkdir -p ${dir $@}
	$(OPUS2MOSES) -d ${CORPUSXML} -s ${SRCEXT} -t ${TRGEXT} \
		-P ${SRC}-${TRG}/ids \
		$< ${SRC}-${TRG}/c
	gzip -f ${SRC}-${TRG}/c.${SRCEXT}
	gzip -f ${SRC}-${TRG}/c.${TRGEXT}
	gzip -f ${SRC}-${TRG}/ids


# ## directly from download directory
# ## without converting again
# ## (don't do this because we may want to align different 
# ##  versions of the corpus, e.g. the UDpipe version)

# ${SRC}-${TRG}/c.${SRCEXT}.gz: ${CORPUSHTML}/${SRC}-${TRG}.txt.zip
# 	mkdir -p ${dir $@}
# 	unzip -d ${dir $@} $<
# 	mv ${wildcard ${dir $@}${CORPUS}.*.${SRCEXT}} ${SRC}-${TRG}/c.${SRCEXT}
# 	mv ${wildcard ${dir $@}${CORPUS}.*.${TRGEXT}} ${SRC}-${TRG}/c.${TRGEXT}
# 	rm -f ${dir $@}${CORPUS}.*.ids.gz
# 	gzip -f ${SRC}-${TRG}/c.${SRCEXT}
# 	gzip -f ${SRC}-${TRG}/c.${TRGEXT}



# symmetrised word alignments

${SRC}-${TRG}/model/aligned.${ALIGNMENT}.gz: \
		${SRC}-${TRG}/model/aligned.srctotgt.gz \
		${SRC}-${TRG}/model/aligned.tgttosrc.gz
	gzip -cd < ${SRC}-${TRG}/model/aligned.srctotgt.gz > $@.s2t
	gzip -cd < ${SRC}-${TRG}/model/aligned.tgttosrc.gz > $@.t2s
	$(ATOOLS) -c ${ALIGNMENT} -i $@.s2t -j $@.t2s | gzip -c > $@
	rm -f $@.s2t $@.t2s

# wordalignment with efmaral (both directions)
# use prefix-stemming and lowercasing to improve statistics

%/model/aligned.${SRCEXT}: %/${CORPUSBASE}.${SRCEXT}.gz
	mkdir -p ${dir $@}
	gzip -cd $< > $@.tmp
	${MOSESSCRIPTS}/training/wrappers/make-factor-stem.perl 4 $@.tmp $@.stem4
	${MOSESSCRIPTS}/tokenizer/lowercase.perl < $@.stem4 > $@
	rm -f $@.tmp $@.stem4

%/model/aligned.${TRGEXT}: %/${CORPUSBASE}.${SRCEXT}.gz
	mkdir -p ${dir $@}
	gzip -cd ${<:${SRCEXT}.gz=${TRGEXT}.gz} > $@.tmp
	${MOSESSCRIPTS}/training/wrappers/make-factor-stem.perl 4 $@.tmp $@.stem4
	${MOSESSCRIPTS}/tokenizer/lowercase.perl < $@.stem4 > $@
	rm -f $@.tmp $@.stem4

4COL = /dev/null /dev/null /dev/null /dev/null
%/aligned.${SRCEXT}-${TRGEXT}: %/aligned.${SRCEXT} %/aligned.${TRGEXT}
	paste -d ' ||| ' ${word 1,$^} ${4COL} ${word 2,$^} > $@


# don't delete those intermediate files
.SECONDARY: ${SRC}-${TRG}/model/aligned.srctotgt.gz ${SRC}-${TRG}/model/aligned.tgttosrc.gz

%.srctotgt.gz: %.${SRCEXT}-${TRGEXT}
	${EFMARAL} -i $< | gzip -c > $@

%.tgttosrc.gz: %.${SRCEXT}-${TRGEXT}
	${EFMARAL} -i $< -r | gzip -c > $@


# grep phrase pairs with only alphabetic characters and freq>1 for both
# sort numerically on score 1

${SRC}-${TRG}/phrases-alpha.gz: ${SRC}-${TRG}/model/phrase-table.gz
	( export LC_ALL=en_US.UTF-8; \
	gzip -cd $< | \
	egrep -i '^[[:alpha:] ]+\|\|\|[[:alpha:] ]+\|\|\|' |\
	cut -f1,4,7,13 -d '|' | \
	egrep -v '\| 1 [0-9]*$$' | \
	egrep -v '\| [0-9]* 1$$' | \
	LC_ALL=C sort -t '|' -k 3.1gr,1 |\
	gzip -c > $@ )


cleanup:
	rm -f ${SRC}-${TRG}/model/extract*
	rm -f ${SRC}-${TRG}/model/tmp.*
	rm -fr ${SRC}-${TRG}/corpus
	rm -fr ${SRC}-${TRG}/giza.*

tmp: 
	mkdir -p ${CORPUSWORDALIGN}/tmp
	ln -s ${CORPUSWORDALIGN}/tmp tmp


#-----------------------------
# train truecaser models
#-----------------------------


# train truecaser model for all languages

all-truecaser: ${TRUECASER}

# train truecaser model for source and target language

truecaser: 	${CORPUSWORDALIGN}/truecaser/${SRC} \
		${CORPUSWORDALIGN}/truecaser/${TRG}

# a very simplistic way of changing tokenized XML to plain text

${CORPUSWORDALIGN}/truecaser/%.txt: ${CORPUSXML}/%
	mkdir -p `dirname $@`
	find $< -name '*.xml.gz' | \
	xargs zcat | \
	perl -p -e 'chomp;s/<\/s>/\n/;' | \
	grep -v '^ *$$' | \
	sed	-e 's/<[^>]*>//g' \
		-e 's/  */ /g' \
		-e 's/\&gt;/>/g' \
		-e 's/\&lt;/</g' \
		-e 's/\&amp;/&/g' \
		-e 's/\&quot;/"/g' \
		-e "s/\&apos;/'/g" | \
	sed 	-e 's/^ *//' \
		-e 's/ *$$//' > $@

${TRUECASER_GZ}:
	mkdir -p `dirname $@`
	make $(patsubst %.gz, %.txt,$@)
	${TOOLS}/public/preprocess/recaser/my-train-truecaser.perl \
		--corpus $(patsubst %.gz, %.txt,$@) \
		--model $@.tmp
	gzip -f $@.tmp
	mv $@.tmp.gz $@
	rm -f $(patsubst %.gz, %.txt,$@)

${TRUECASER}: %: %.gz
	gzip -cd $< > $@


# monolingual data for language modeling

${CORPUSWORDALIGN}/lm/${CORPUS}.%.gz: ${CORPUSXML}/%
	mkdir -p `dirname $@`
	find $< -name '*.xml.gz' | \
	xargs zcat | \
	perl ${TOOLS}/opus/xml2txt.pl | \
	sed 's/  */ /g;s/^ *//;s/ *$$//' |\
	gzip -c > $@


${CORPUSWORDALIGN}/lm/${CORPUS}.raw.%.gz: ${CORPUSRAW}/%
	mkdir -p `dirname $@`
	find $< -name '*.xml.gz' | \
	xargs zcat | \
	perl ${TOOLS}/opus/xml2txt.pl | \
	sed 's/  */ /g;s/^ *//;s/ *$$//' |\
	gzip -c > $@




###########################################################################
#
# filter phrase tables
#
###########################################################################

PHRASETABLES = $(patsubst %/phrase-table.gz,%/phrase-table-filtered.gz,\
		$(wildcard */model/phrase-table.gz))

SMTTOOLSHOME = ${HOME}/projects/SMT
SMTTOOLS     = ${SMTTOOLSHOME}/tools

MOSESHOME    = ${SMTTOOLSHOME}/mosesdecoder
MOSESCONTRIB = ${MOSESHOME}/contrib

.PHONY: filter-all-phrase-tables
filter-all-phrase-tables: $(PHRASETABLES)

.PHONY:
filter-phrase-table: ${SRC}-${TRG}/model/phrase-table-filtered.gz

%/phrase-table-filtered.gz: %.src.sa_suffix %.trg.sa_suffix %/phrase-table.gz
	zcat $(subst -filtered,,$@) | \
	${MOSESCONTRIB}/sigtest-filter/filter-pt \
		-f $< \
		-e $(subst src,trg,$<) \
		-l a+e -n 30 |\
	gzip -c > $@
	rm -f $<* $(subst src,trg,$<)*
	rm -f $^

# create suffix arrays for the bitext (training corpus)

%.src.sa_suffix:
	if [ $(word 1,$(subst -, ,$@)) != $(word 2,$(subst -, ,$(subst /, ,$@))) ]; then \
	  gzip -cd < $(dir $@)${CORPUSBASE}.$(word 1,$(subst -, ,$@)).gz > $@; \
	else \
	  gzip -cd < $(dir $@)${CORPUSBASE}.$(word 1,$(subst -, ,$@))1.gz > $@; \
	fi
	${SMTTOOLS}/SALM/Bin/Linux/Index/IndexSA.O32 $@

%.trg.sa_suffix:
	if [ $(word 1,$(subst -, ,$@)) != $(word 2,$(subst -, ,$(subst /, ,$@))) ]; then \
	  gzip -cd < $(dir $@)${CORPUSBASE}.$(word 2,$(subst -, ,$(subst /, ,$@))).gz > $@; \
	else \
	  gzip -cd < $(dir $@)${CORPUSBASE}.$(word 2,$(subst -, ,$(subst /, ,$@)))2.gz > $@; \
	fi
	${SMTTOOLS}/SALM/Bin/Linux/Index/IndexSA.O32 $@
