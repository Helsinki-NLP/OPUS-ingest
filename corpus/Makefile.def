# -*-makefile-*-
#--------------------------------------------------------------------
# Joerg Tiedemann			2010-11-05
# tiedeman@gmail.com
#
# general variables for OPUS corpora
#--------------------------------------------------------------------


# assume that the first subdir OPUS is our root-dir
ifndef OPUSHOME
  OPUSHOME=$(shell pwd | sed 's|OPUS/.*|OPUS|')
endif

# set version to latest if necessary
ifndef VERSION
  VERSION=latest
endif


#
# OPUSCORPORA ..... home directory of all corpora in OPUS
# OPUSDATA ........ data files like original sources etc
# OPUSPUB ......... public www data (public_html)
# OPUSHTML ........ downloadable files (to be available from www)
# OPUSWORDALIGN ... word alignment and translation models


OPUSCORPORA   = ${OPUSHOME}/corpus
OPUSDATA      = ${OPUSHOME}/data


## old OPUS server: public_html is next to OPUS
## new OPUS: public_html is within OPUS and html,wordalign is in download
## (hostname -d does not seem to work on Mac OS)

ifeq ("${shell hostname | cut -f2- -d.}","novalocal")
  OPUSPUB       = ${OPUSHOME}/web
  OPUSHTML      = /media/download
  OPUSRELEASE   = /media/releases
  OPUSWORDALIGN = /media/releases
else ifeq ("${shell hostname | cut -f2- -d.}","lingfil.uu.se")
  OPUSPUB       = ${OPUSHOME}/../public_html
  OPUSHTML      = ${OPUSHOME}/html
  OPUSRELEASE   = ${OPUSHOME}/releases
  OPUSWORDALIGN = ${OPUSHOME}/wordalign
# else ifeq ("${shell hostname | cut -f2- -d.}","csc.fi")
else
  OPUSNLPL      = /proj/nlpl/data/OPUS
  OPUSPUB       = ${OPUSHOME}/web
  OPUSHTML      = ${OPUSHOME}/download
  OPUSWORDALIGN = ${OPUSHOME}/wordalign
  OPUSRELEASE   = ${OPUSNLPL}
endif


# CWB home for standard annotation
OPUSCWB      = ${OPUSHOME}/cwb
CWBDATA      = ${OPUSCWB}/data
CWBREG       = ${OPUSCWB}/reg

# CWB home for UD-parsed data
UDCWB        = ${OPUSHOME}/cwb-ud
UDCWBDATA    = ${UDCWB}/data
UDCWBREG     = ${UDCWB}/reg


# corpus-specific directories
CORPUSHOME       = ${OPUSCORPORA}/${CORPUS}
CORPUSSRC        = ${CORPUSHOME}/src
CORPUSXML        = ${CORPUSHOME}/xml
CORPUSRAW        = ${CORPUSHOME}/raw
CORPUSPARSED     = ${CORPUSHOME}/parsed
CORPUSPUB        = ${OPUSPUB}/${CORPUS}/${VERSION}
CORPUSHTML       = ${OPUSHTML}/${CORPUS}
CORPUSRELEASE    = ${OPUSRELEASE}/${CORPUS}/${VERSION}
# CORPUSWORDALIGN  = ${CORPUSRELEASE}/wordalign
# CORPUSWORDALIGN  = ${OPUSWORDALIGN}/${CORPUS}
CORPUSWORDALIGN  = ${CORPUSHOME}/wordalign


# LANGUAGES ....... sorted list of languages (2/3-letter codes possibly
#                   with region extension); need to be subdirectories of
#                   the source text directory! --> might have to run 
#                   'make' in source text directory first!

ifndef LANGUAGES
  LANGUAGES := $(sort $(notdir $(wildcard ${CORPUSSRC}/??)) \
                      $(notdir $(wildcard ${CORPUSSRC}/???)) \
                      $(notdir $(wildcard ${CORPUSSRC}/??_??)) \
                      $(notdir $(wildcard ${CORPUSRAW}/??)) \
                      $(notdir $(wildcard ${CORPUSRAW}/???)) \
                      $(notdir $(wildcard ${CORPUSRAW}/??_??)) \
		      ${patsubst %.raw.tar.gz,%,\
			$(notdir $(wildcard ${CORPUSHTML}/*.raw.tar.gz))})
endif


# general file extension of files in the corpus
# (if you add .gz --> all files will be compressed)

XMLEXT = xml.gz
TXTEXT = txt.gz
ALGEXT = xml.gz

#
# general tools that we will use for pre-processing & alignment
#

TOOLS       = ${OPUSHOME}/tools
OPUSTOOLS   = ${TOOLS}
CORPUSTOOLS = ${OPUSTOOLS}/${CORPUS}

ISO639      = opus-iso639

## TODO: get rid of local UPLUG
UPLUGHOME  = ${TOOLS}/public/uplug/uplug-main
UPLUGCWB   = ${TOOLS}/public/uplug/uplug-cwb
UPLUGTOOLS = ${UPLUGHOME}/tools
UPLUG      = $(shell which uplug)

# SMT tools via Moses (TODO: adjust to NLPL!)

MOSESHOME       = ${USERAPPL}/tools/mosesdecoder-2017
MOSESSCRIPTS    = ${MOSESHOME}/scripts
SCRIPTS_ROOTDIR = ${MOSESSCRIPTS}

# Word alignment tools (TODO: adjust to NLPL!)

# EFLOMAL         = eflomal
EFLOMAL         = ${USERAPPL}/tools/eflomal/align.py
EFMARAL         = ${USERAPPL}/tools/efmaral/efmaral.py
ATOOLS          = ${USERAPPL}/tools/fast_align/atools

#--------------------------------------------------------------------
# individual pre-processing steps (using Uplug)
#
# PAR ........ paragraph markup
# SENT ....... sentence boundary detection
# TOK ........ tokenization
# PRE_ALL .... make everything (par, sent, tok)
# PRE_SENT ... make only par & sent (no tokenization)
#--------------------------------------------------------------------

PAR        = ${UPLUG} pre/markup
SENT       = ${UPLUG} pre/sent -l ${LANGUAGE}
TOKSIMPLE  = ${UPLUG} pre/tok-simple
TOKMOSES   = ${UPLUG} pre/tok -l ${LANGUAGE}
TOK        = ${UPLUG} pre/tok -l ${LANGUAGE}
PRE_ALL    = ${UPLUG} pre/basic
PRE        = ${UPLUG} pre/par-sent

# language specific tools if they exist

# 1) all pre-processing steps

ifneq (,$(wildcard ${shell uplug -e pre/${LANGUAGE}-all 2>/dev/null}))
  PRE_ALL=${UPLUG} pre/${LANGUAGE}-all
endif

# # 2) a language-specific tokenizer

ifneq (,$(wildcard ${shell uplug -e pre/${LANGUAGE}/tok 2>/dev/null}))
   TOK=${UPLUG} pre/${LANGUAGE}/tok
endif

# 3) a tokenizer + tagger tool

ifneq (,$(wildcard ${shell uplug -e pre/${LANGUAGE}/toktag 2>/dev/null}))
  TOK=${UPLUG} pre/${LANGUAGE}/toktag
endif

# 4) a language-specific sentence boundary detection tool

ifneq (,$(wildcard ${shell uplug -e pre/${LANGUAGE}/sent 2>/dev/null}))
  SENT=${UPLUG} pre/${LANGUAGE}/sent
endif


#--------------------------------------------------------------------
# sentence alignment
#   sent ... Gale&Church (original C-code via Uplug)
#   hun .... hunalign (called from Uplug) - default
#--------------------------------------------------------------------

SENTALIGN  = ${UPLUG} align/hun
# SENTALIGN = ${UPLUG} align/sent






## always load generic makefile for submitting hpc-jobs
## TODO: is it good to do that here?

include ${OPUSCORPORA}/Makefile.submit
